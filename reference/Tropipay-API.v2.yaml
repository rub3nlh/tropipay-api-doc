openapi: 3.0.0
info:
  title: TPP API v2.0
  version: '2.0'
  description: Tropipay API V2.0
servers:
  - url: 'https://tropipay-dev.herokuapp.com/api/v2'
    description: Develop
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /hook:
    get:
      summary: Your GET endpoint
      tags:
        - Hooks
      responses:
        '200':
          description: Here we have an example of a valid response for a merchant who subscribed to two events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'
              examples:
                Example:
                  value:
                    - event: user_signup
                      target: email
                      value: tonykssa@gmail.com
                      createdAt: '2021-02-13T21:30:59.154Z'
                      updatedAt: '2021-02-13T21:30:59.154Z'
                    - event: user_login
                      target: web
                      value: 'http://localhost:4000/api/user/login/listen'
                      createdAt: '2021-02-13T22:43:11.243Z'
                      updatedAt: '2021-02-13T22:43:11.243Z'
        '500':
          description: |-
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                'Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      operationId: get-api-v2-hook
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          name: Authorization
          description: 'Bearer {YOUR_TOKEN}'
          required: true
      description: |
        Endpoint for get event list hook by merchant. 

        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )

        ## Event 
        Events are made up of an object with three fundamental properties *(event, target, value)*
        ```json
        {
              "event": "user_signup",
              "target": "email",
              "value": "tonykssa@gmail.com",
              "createdAt": "2021-02-13T21:30:59.154Z",
              "updatedAt": "2021-02-13T21:30:59.154Z"
        }
        ```

        * **event:** String that represents the name of the event, you must select from the list of available events, otherwise it will not produce an error but it will not be executed. For get full list of available events see endpoint **GET /api/v2/hook/events**.
        * **target:** String representing the type of event supported. It is currently available: 'web' (allows to receive information in a url), 'email' (allows to receive information in an email address). 
        * **value:** String that represents the value depending on the type of selected event determined by the 'target' property, for example if the selected 'target' is email the value would be an email address, likewise if the selected 'target' is 'web' the expected value corresponds to a url that receives information through the HTTP POST method. 
    post:
      summary: Subscribe to new hook
      operationId: post-api-v2-hook
      responses:
        '200':
          description: 'Here we have an example of a valid response:'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
              examples:
                example-1:
                  value:
                    action: insert
                    status: success
                    details:
                      event: user_signup
                      target: web
                      value: 'https://www.merchant_domain.com/api/user/signup/listen'
        '500':
          description: |
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                ' Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      description: |
        Endpoint allows a merchant to subscribe to an event, specifying the options to receive information at the time it is trigger.


        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )

        ## Event 
        Events are made up of an object with three fundamental properties *(event, target, value)*
        ```json
        {
              "event": "user_signup",
              "target": "email",
              "value": "tonykssa@gmail.com",
              "createdAt": "2021-02-13T21:30:59.154Z",
              "updatedAt": "2021-02-13T21:30:59.154Z"
        }
        ```

        * **event:** String that represents the name of the event, you must select from the list of available events, otherwise it will not produce an error but it will not be executed. For get full list of available events see endpoint **GET /api/v2/hook/events**.
        * **target:** String representing the type of event supported. It is currently available: 'web' (allows to receive information in a url), 'email' (allows to receive information in an email address). 
        * **value:** String that represents the value depending on the type of selected event determined by the 'target' property, for example if the selected 'target' is email the value would be an email address, likewise if the selected 'target' is 'web' the expected value corresponds to a url that receives information through the HTTP POST method. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              example-1:
                value:
                  event: user_signup
                  target: web
                  value: 'https://www.merchant_domain.com/api/user/signup/listen'
        description: 'Here we have an example of a valid params request:'
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          description: 'Bearer {your-token}'
          name: Authentication
          required: true
    put:
      summary: ''
      operationId: put-api-v2-hook
      responses:
        '200':
          description: 'Here we have an example of a valid response:'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
              examples:
                example-1:
                  value:
                    action: update
                    status: success
                    details:
                      event: user_signup
                      target: email
                      value: tonykssa@gmail.com
        '500':
          description: |
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                'Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      description: |
        Endpoint allows a merchant update event subscription , specifying the options to receive information at the time it is trigger.Take into account the value of the name or denomination of the event cannot be modified, in case it is required to change this field, it is recommended to delete it and create a new subscription.


        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          name: 'Authorization    '
          description: 'Bearer {YOUR_TOKEN}'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              example-1:
                value:
                  event: user_signup
                  target: email
                  value: tonykssa@gmail.com
        description: ''
    delete:
      summary: ''
      operationId: delete-api-v2-hook
      responses:
        '200':
          description: 'Here we have an example of a valid response:'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
              examples:
                example-1:
                  value:
                    action: delete
                    status: success
                    details:
                      event: user_signup
                      target: email
                      value: tonykssa@gmail.com
        '500':
          description: |-
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                'Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      description: |
        Endpoint allows a merchant to unsubscribe from an event by name or denomination.


        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          name: 'Authorization    '
          description: 'Bearer {YOUR_TOKEN}'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
            examples:
              example-1:
                value:
                  event: user_signup
        description: ''
    parameters: []
  /hook/events:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: 'Here we have an example of a valid response: '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListDescription'
              examples:
                example-1:
                  value:
                    - name: user_signup
                      description: Event launched once an user complete registration on the TropiPay platform.
                    - name: payment_in_state_change
                      description: The event is fired once a user changes their status payment in entry method.
                    - name: payment_out_state_change
                      description: The event is fired once a user changes their status payment out entry method.
        '500':
          description: |
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                'Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      operationId: get-api-v2-hook-events
      description: |
        Endpoint for get full list of available events.

        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )

        ## Events 
        Events are made up of an object with two fundamental properties *(name, description)*
        ```json
        { 
            name: 'user_signup', 
            description: 'Event launched once an user complete registration on the TropiPay platform.' 
        }
        ```
        The **name** is a key element because it determines the correct operation when registering, if it is specified with the wrong value the merchant will never receive the notification. 
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          name: Authorization
          description: 'Bearer {YOUR_TOKEN}'
          required: true
      tags:
        - Hooks
    parameters: []
  /access:
    post:
      summary: Obtain login URL
      operationId: post-api-v2-access
      responses:
        '200':
          description: 'Here we have an example of a valid response:'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessResponse'
              examples:
                example-1:
                  value:
                    url: 'https://www.tropipay.com/m-login/eyJtZXJjaGFudElkIjoxLCJzaWduYXR1cmUiOiJmZmVhZTE2ZDM4MmQ1ZDFjZDlkYjU5NzdmYzcxZmUzYiIsImNvZGUiOjE2MTM3Nzk4NTYxMzgsInJlZGlyZWN0VHlwZSI6IjEiLCJleHRyYUNTUyI6Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzcyIsInJlZGlyZWN0VXJsIjoiaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbSJ9'
        '500':
          description: |-
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                'Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      description: |-
        Endopint that allows obtaining the url to obtain the login form of the TropiPay platform. Take in mind that the login url provides a form that must be rendered in a container, we recommend the use of *IFRAME*. For security reasons the login url will be valid for 30 seconds, after that term it will have to be requested again. 

        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessRequest'
            examples:
              example-1:
                value:
                  redirectType: 1
                  extraCSS: 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'
                  redirectUrl: 'https://www.merchant.com/homr'
        description: 'Here we have an example of a valid request:'
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          description: 'Bearer {your-token}'
          name: Authorization
          required: true
      tags:
        - Authentication
    parameters: []
  /countries:
    get:
      summary: Your GET endpoint
      tags:
        - Countries
      responses:
        '200':
          description: |-
            ```
            {
                "count": 245,
                "rows": [
                    {
                        "id": 44,
                        "name": "Afghanistan",
                        "sepaZone": false,
                        "state": 1,
                        "slug": "AF",
                        "callingCode": 93,
                        "isDestination": false,
                        "createdAt": "2019-09-03T15:22:26.410Z",
                        "updatedAt": "2019-09-03T15:22:26.410Z"
                    },
                    {
                        "id": 43,
                        "name": "Albania",
                        "sepaZone": false,
                        "state": 1,
                        "slug": "AL",
                        "callingCode": 355,
                        "isDestination": false,
                        "createdAt": "2019-09-03T15:22:26.410Z",
                        "updatedAt": "2019-09-03T15:22:26.410Z"
                    },
                    ...
                    {
                        "id": 254,
                        "name": "Zimbabwe",
                        "sepaZone": false,
                        "state": 1,
                        "slug": "ZW",
                        "callingCode": 263,
                        "isDestination": false,
                        "createdAt": "2019-09-03T15:22:26.514Z",
                        "updatedAt": "2019-09-03T15:22:26.514Z"
                    }
                ],
                "limit": 300,
                "offset": 0
            }
            ```
      operationId: get-api-countries
      description: Endpoint that allows obtaining the list of countries
    parameters: []
  /countries/destinations:
    get:
      summary: Your GET endpoint
      tags:
        - Countries
      responses:
        '200':
          description: |-
            ```
            {
                "count": 48,
                "rows": [
                    {
                        "id": 5,
                        "name": "Alemania",
                        "sepaZone": true,
                        "state": 1,
                        "slug": "DE",
                        "callingCode": 49,
                        "isDestination": true,
                        "createdAt": "2019-05-14T09:37:40.349Z",
                        "updatedAt": "2019-05-14T09:37:40.349Z",
                        "countryPaymentTypes": [
                            {
                                "id": 22,
                                "countryDestinationId": 5,
                                "paymentTypeId": 2,
                                "paymentType": "Depósito",
                                "active": true,
                                "createdAt": "2020-07-31T09:56:59.669Z",
                                "updatedAt": "2020-07-31T09:56:59.669Z"
                            }
                        ]
                    },
                    {
                        "id": 41,
                        "name": "Andorra",
                        "sepaZone": true,
                        "state": 1,
                        "slug": "AD",
                        "callingCode": 376,
                        "isDestination": true,
                        "createdAt": "2019-09-03T15:22:26.411Z",
                        "updatedAt": "2019-10-18T10:21:13.673Z",
                        "countryPaymentTypes": [
                            {
                                "id": 30,
                                "countryDestinationId": 41,
                                "paymentTypeId": 2,
                                "paymentType": "Depósito",
                                "active": true,
                                "createdAt": "2020-07-31T09:57:20.913Z",
                                "updatedAt": "2020-07-31T09:57:20.913Z"
                            }
                        ]
                    },
                    ...
                    {
                        "id": 31,
                        "name": "Uruguay",
                        "sepaZone": false,
                        "state": 1,
                        "slug": "UY",
                        "callingCode": 598,
                        "isDestination": true,
                        "createdAt": "2019-07-24T10:22:09.286Z",
                        "updatedAt": "2019-07-24T10:22:09.286Z",
                        "countryPaymentTypes": [
                            {
                                "id": 9,
                                "countryDestinationId": 31,
                                "paymentTypeId": 2,
                                "paymentType": "Depósito",
                                "active": true,
                                "createdAt": "2020-07-31T09:56:38.686Z",
                                "updatedAt": "2020-07-31T09:56:38.686Z"
                            }
                        ]
                    }
                ],
                "limit": 300,
                "offset": 0
            }
            ```
      operationId: get-api-countries-destinations
      description: Endpoint that allows obtaining the list of countries destinations
    parameters: []
  /occupations:
    get:
      summary: Your GET endpoint
      tags:
        - Occupations
      responses:
        '200':
          description: |-
            ```
            {
                "count": 29,
                "rows": [
                    {
                        "id": 15,
                        "name": "Administrativo/a",
                        "description": null,
                        "code": "15",
                        "active": true,
                        "createdAt": "2019-09-03T15:22:26.228Z",
                        "updatedAt": "2019-09-03T15:22:26.228Z"
                    },
                    {
                        "id": 4,
                        "name": "Agricultura",
                        "description": null,
                        "code": "2",
                        "active": true,
                        "createdAt": "2019-09-03T15:22:26.218Z",
                        "updatedAt": "2019-09-03T15:22:26.218Z"
                    },
                    ...
                    {
                        "id": 28,
                        "name": "Transportista",
                        "description": null,
                        "code": "29",
                        "active": true,
                        "createdAt": "2019-09-03T15:22:26.236Z",
                        "updatedAt": "2019-09-03T15:22:26.236Z"
                    }
                ],
                "limit": 100,
                "offset": 0
            }
            ```
      operationId: get-api-occupations
      description: Endpoint that allows obtaining the list of occupations
  /access/signup:
    post:
      summary: User SignUp
      operationId: post-access-signup
      responses:
        '200':
          description: |-
            {
                "user": "66291db0-77a2-11eb-a197-a1853f6310fa"
            }
      description: This endpoint allow you to add a new user to the system
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                mid:
                  type: number
                clientTypeId:
                  type: number
                email:
                  type: string
                  minLength: 1
                password:
                  type: string
                t_c_version:
                  type: string
                  minLength: 1
                state:
                  type: number
                kycLevel: {}
                name:
                  type: string
                  minLength: 1
                surname:
                  type: string
                  minLength: 1
                birthDate:
                  type: string
                  minLength: 1
                occupationId:
                  type: number
                otherOccupationDetail:
                  type: string
                  minLength: 1
                isPublicOffice:
                  type: boolean
                birthCountryId:
                  type: number
                documentId:
                  type: string
                  minLength: 1
                lang:
                  type: string
                  minLength: 1
                groupId:
                  type: number
                address:
                  type: string
                  minLength: 1
                countryDestinationId:
                  type: number
                city:
                  type: string
                  minLength: 1
                province:
                  type: string
                  minLength: 1
                postalCode:
                  type: string
                  minLength: 1
                phone:
                  type: string
                  minLength: 1
                callingCode:
                  type: string
                  minLength: 1
                validationCode:
                  type: string
                  minLength: 1
              required:
                - mid
                - clientTypeId
                - email
                - password
                - t_c_version
                - state
                - name
                - surname
                - birthDate
                - occupationId
                - otherOccupationDetail
                - isPublicOffice
                - birthCountryId
                - documentId
                - lang
                - groupId
                - address
                - countryDestinationId
                - city
                - province
                - postalCode
                - phone
                - callingCode
                - validationCode
        description: |-
          To create a new user in the system, you have to make a POST with all mandatory fields.
          ### warning
          Before doing this request make sure to verify user email address by hitting 
          ```/api/v2/access/sendEmailCode```
          to get validationToken
      parameters:
        - schema:
            type: string
          in: header
      tags:
        - Authentication
    parameters: []
  /access/sendEmailCode:
    parameters: []
    post:
      summary: Send Email Validation Code to user
      operationId: post-access-sendEmailCode
      responses:
        '200':
          description: OK
        '400':
          description: |-
            {
                "error": {
                    "code": "VALIDATION_ERROR",
                    "message": "That email is already registered"
                }
            }
      description: 'In order to subscribe a new user, you have first to validate user email. This can be done by POSTing the new user email '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
            examples:
              example-1:
                value:
                  email: john@doe.com
        description: ''
      tags:
        - Authentication
  /access/sendPhoneCode:
    post:
      summary: Send Phone Validation Code to user
      operationId: post-access-sendPhoneCode
      responses:
        '200':
          description: OK
      tags:
        - Authentication
  /depositaccounts:
    get:
      summary: Deposit Accounts
      tags:
        - DepositAccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  count:
                    type: number
                  rows:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        accountNumber:
                          type: string
                          minLength: 1
                        alias:
                          type: string
                          minLength: 1
                        swift:
                          type: string
                          minLength: 1
                          description: SWIFT code of destination account. Ignored when beneficiaryType == 1
                        type:
                          type: number
                        country: {}
                        firstName:
                          type: string
                          minLength: 1
                          description: Beneficiary Name. Ignored when beneficiaryType == 1
                        default: {}
                        state:
                          type: number
                        userId:
                          type: string
                          minLength: 1
                        countryDestinationId:
                          type: number
                        lastName:
                          type: string
                          minLength: 1
                          description: Beneficiary LastName. Ignored when beneficiaryType == 1
                        documentNumber:
                          type: string
                          minLength: 1
                        userRelationTypeId:
                          type: number
                        city:
                          type: string
                          minLength: 1
                        postalCode:
                          type: number
                        address:
                          type: string
                          minLength: 1
                        phone:
                          type: string
                          minLength: 1
                        checked:
                          type: boolean
                        province:
                          type: string
                          minLength: 1
                        beneficiaryType:
                          type: number
                        relatedUserId: {}
                        currency:
                          type: string
                          minLength: 1
                        correspondent: {}
                        location: {}
                        office: {}
                        officeValue: {}
                        paymentType:
                          type: number
                        paymentEntityBeneficiaryId:
                          type: number
                        paymentEntityAccountId:
                          type: number
                        verified: {}
                        documentTypeId: {}
                        documentExpirationDate: {}
                        createdAt:
                          type: string
                          minLength: 1
                        updatedAt:
                          type: string
                          minLength: 1
                      required:
                        - id
                        - accountNumber
                        - alias
                        - type
                        - state
                        - userId
                        - countryDestinationId
                        - documentNumber
                        - userRelationTypeId
                        - city
                        - postalCode
                        - address
                        - phone
                        - checked
                        - province
                        - beneficiaryType
                        - currency
                        - paymentType
                        - paymentEntityBeneficiaryId
                        - paymentEntityAccountId
                        - createdAt
                        - updatedAt
                required:
                  - count
                  - rows
              examples:
                example:
                  value:
                    count: 2
                    rows:
                      - id: 45461
                        accountNumber: 9111 1234 5678 9012
                        alias: Joe Account
                        swift: BSOBUSHHXXX
                        type: 3
                        country: null
                        firstName: John
                        default: null
                        state: 1
                        userId: b168e810-e0bb-11ea-8b91-bc41f597fbe4
                        countryDestinationId: 1
                        lastName: Doe
                        documentNumber: '831108111111'
                        userRelationTypeId: 4
                        city: Barcelona
                        postalCode: 11300
                        address: '110, Some Street'
                        phone: '+3412341245'
                        checked: true
                        province: Cataluña
                        beneficiaryType: 2
                        relatedUserId: null
                        currency: USD
                        correspondent: null
                        location: null
                        office: null
                        officeValue: null
                        paymentType: 2
                        paymentEntityBeneficiaryId: 11111
                        paymentEntityAccountId: 22222
                        verified: null
                        documentTypeId: null
                        documentExpirationDate: null
                        createdAt: '2020-11-27T02:43:47.108Z'
                        updatedAt: '2021-02-11T22:41:32.518Z'
                      - id: 49021
                        accountNumber: Jane.doe@gmail.com
                        alias: Jane Tropipay
                        swift: null
                        type: 9
                        country: null
                        firstName: Jane
                        default: null
                        state: 0
                        userId: b168e810-e0bb-11ea-8b91-bd37f597fb67
                        countryDestinationId: 1
                        lastName: Doe
                        documentNumber: null
                        userRelationTypeId: 4
                        city: La Habana
                        postalCode: 11300
                        address: 'Calle 41 #112 e/1ra y 3ra, Miramar, Playa'
                        phone: '+5351234567'
                        checked: true
                        province: La Habana
                        beneficiaryType: 1
                        relatedUserId: 17e9f790-492c-11eb-9c96-bfb9401b8daa
                        currency: null
                        correspondent: null
                        location: null
                        office: null
                        officeValue: null
                        paymentType: 99
                        paymentEntityBeneficiaryId: null
                        paymentEntityAccountId: null
                        verified: null
                        documentTypeId: null
                        documentExpirationDate: null
                        createdAt: '2020-12-28T16:50:52.235Z'
                        updatedAt: '2020-12-28T16:50:52.235Z'
      operationId: get-depositaccounts
      description: 'Returns the list of beneficiaries (depositAccounts) of logged user. Beneficiaries can be active (status: 0) or inactive (status: 1) '
      parameters:
        - in: unknown
        - $ref: '#/components/parameters/User-Authorization-Token'
    post:
      summary: ''
      operationId: post-depositaccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  accountNumber:
                    type: string
                    minLength: 1
                  alias:
                    type: string
                    minLength: 1
                  swift:
                    type: string
                    minLength: 1
                  type:
                    type: number
                  country: {}
                  firstName:
                    type: string
                    minLength: 1
                  userId:
                    type: string
                    minLength: 1
                  countryDestinationId:
                    type: number
                  lastName:
                    type: string
                    minLength: 1
                  secondLastName:
                    type: string
                    minLength: 1
                  documentNumber:
                    type: string
                    minLength: 1
                  userRelationTypeId:
                    type: number
                  city:
                    type: string
                    minLength: 1
                  postalCode:
                    type: number
                  address:
                    type: string
                    minLength: 1
                  phone:
                    type: string
                    minLength: 1
                  checked:
                    type: boolean
                  province:
                    type: string
                    minLength: 1
                  beneficiaryType:
                    type: number
                  relatedUserId: {}
                  currency:
                    type: string
                    minLength: 1
                  correspondent: {}
                  location: {}
                  office: {}
                  officeValue: {}
                  paymentType:
                    type: number
                  verified: {}
                  documentTypeId: {}
                  documentExpirationDate: {}
                required:
                  - accountNumber
                  - alias
                  - swift
                  - type
                  - firstName
                  - userId
                  - countryDestinationId
                  - lastName
                  - secondLastName
                  - documentNumber
                  - userRelationTypeId
                  - city
                  - postalCode
                  - address
                  - phone
                  - checked
                  - province
                  - beneficiaryType
                  - currency
                  - paymentType
              examples:
                Example:
                  value:
                    id: 45461
                    accountNumber: 9111 1234 5678 9012
                    alias: Joe Account
                    swift: BSOBUSHHXXX
                    type: 3
                    country: null
                    firstName: John
                    default: null
                    state: 1
                    userId: b168e810-e0bb-11ea-8b91-bc41f597fbe4
                    countryDestinationId: 1
                    lastName: Doe
                    documentNumber: '831108111111'
                    userRelationTypeId: 4
                    city: Barcelona
                    postalCode: 11300
                    address: '110, Some Street'
                    phone: '+3412341245'
                    checked: true
                    province: Cataluña
                    beneficiaryType: 2
                    relatedUserId: null
                    currency: USD
                    correspondent: null
                    location: null
                    office: null
                    officeValue: null
                    paymentType: 2
                    paymentEntityBeneficiaryId: 11111
                    paymentEntityAccountId: 22222
                    verified: null
                    documentTypeId: null
                    documentExpirationDate: null
                    createdAt: '2020-11-27T02:43:47.108Z'
                    updatedAt: '2021-02-11T22:41:32.518Z'
      description: Adds a new beneficiary to logged user.
      parameters:
        - in: unknown
        - $ref: '#/components/parameters/User-Authorization-Token'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                accountNumber:
                  type: string
                  minLength: 1
                alias:
                  type: string
                  minLength: 1
                swift:
                  type: string
                  minLength: 1
                type:
                  type: number
                country: {}
                firstName:
                  type: string
                  minLength: 1
                countryDestinationId:
                  type: number
                lastName:
                  type: string
                  minLength: 1
                secondLastName:
                  type: string
                  minLength: 1
                documentNumber:
                  type: string
                  minLength: 1
                userRelationTypeId:
                  type: number
                city:
                  type: string
                  minLength: 1
                postalCode:
                  type: number
                address:
                  type: string
                  minLength: 1
                phone:
                  type: string
                  minLength: 1
                province:
                  type: string
                  minLength: 1
                beneficiaryType:
                  type: number
                relatedUserId: {}
                currency:
                  type: string
                  minLength: 1
                correspondent: {}
                location: {}
                office: {}
                officeValue: {}
                paymentType:
                  type: number
                verified: {}
                documentTypeId: {}
                documentExpirationDate: {}
              required:
                - accountNumber
                - alias
                - type
                - userRelationTypeId
                - beneficiaryType
                - currency
                - paymentType
  '/depositaccounts/:id':
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: 'get-depositaccounts-:id'
      parameters:
        - $ref: '#/components/parameters/User-Authorization-Token'
    put:
      summary: ''
      operationId: 'put-depositaccounts-:id'
      responses:
        '200':
          description: OK
      parameters:
        - $ref: '#/components/parameters/User-Authorization-Token'
    delete:
      summary: ''
      operationId: 'delete-depositaccounts-:id'
      responses:
        '200':
          description: OK
      description: Deletes the beneficiary indicated by id
      parameters:
        - $ref: '#/components/parameters/User-Authorization-Token'
  /access/validatePhone:
    post:
      summary: Validate user Phone number
      operationId: post-access-validatePhone
      responses:
        '200':
          description: OK
      description: 'This allows to validate some user phone number by a secret code previously sent to user by SMS. See [SendPhoneCode](Tropipay-API.v2.yaml/paths/~1access~1sendPhoneCode) for details on how to send validation codes'
      tags:
        - Authentication
components:
  schemas:
    User:
      title: User
      type: object
      description: User Model for Tropipay Clients
      x-examples:
        Alice Smith:
          id: 1423
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Event:
      description: ''
      type: object
      properties:
        event:
          type: string
          minLength: 1
        target:
          type: string
          minLength: 1
        value:
          type: string
          minLength: 1
        createdAt:
          type: string
          minLength: 1
        updatedAt:
          type: string
          minLength: 1
      required:
        - event
        - target
        - value
        - createdAt
        - updatedAt
      x-examples:
        example-1:
          event: user_signup
          target: email
          value: tonykssa@gmail.com
          createdAt: '2021-02-13T21:30:59.154Z'
          updatedAt: '2021-02-13T21:30:59.154Z'
    EventList:
      title: Events
      type: array
      items:
        $ref: '#/components/schemas/Event'
      x-examples:
        example-1:
          - event: user_signup
            target: email
            value: tonykssa@gmail.com
            createdAt: '2021-02-13T21:30:59.154Z'
            updatedAt: '2021-02-13T21:30:59.154Z'
          - event: user_login
            target: web
            value: 'http://localhost:4000/api/user/login/listen'
            createdAt: '2021-02-13T22:43:11.243Z'
            updatedAt: '2021-02-13T22:43:11.243Z'
    ErrorResponse:
      description: ''
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              minLength: 1
            message:
              type: string
              minLength: 1
          required:
            - code
            - message
      required:
        - error
      x-examples:
        example-1:
          error:
            code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
            message: Failed to authenticate token for Merchant!
    AccessRequest:
      description: |-
        -  **redirectType**: the type of request defines the mode in which the login form interacts with its container, it can take one of two possible values: 
           * 1: Redirect the page to a specific address, this being specified in the parameters called *redirectUrl*. 
           * 2: Set communication with the iframe parent container using the *window.addEventListener* and *parent.postMessage messages*.
        -  **redirectUrl**: Set url to which you want to redirect once the login process has been successfully completed, it depends on the value set in the *redirectType* property.
        -  **extraCSS"**: The login form allows to adjust its graphical interface through the injection of stylesheets, this property defines the url of the remote css that you want to insert to customize the mentioned form.
      type: object
      x-examples:
        example-1:
          redirectType: 1
          extraCSS: 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'
          redirectUrl: 'https://my.merchant.com/home'
      properties:
        redirectType:
          type: number
          description: |-
            the type of request defines the mode in which the login form interacts with its container, it can take values such as: 
               * 1: Redirect the page to a specific address, this being specified in the parameters called *redirectUrl*. 
               * 2: Set communication with your container using the *window.addEventListener* and *parent.postMessage messages*.
        extraCSS:
          type: string
          minLength: 1
          description: 'The login form allows to adjust its graphical interface through the injection of stylesheets, this property defines the url of the remote css that you want to insert to customize the mentioned form.'
        redirectUrl:
          type: string
          minLength: 1
          description: 'Set url to which you want to redirect once the login process has been successfully completed, it depends on the value set in the *redirectType* property.'
      required:
        - redirectType
        - extraCSS
        - redirectUrl
    AccessResponse:
      description: ''
      type: object
      properties:
        url:
          type: string
          minLength: 1
      required:
        - url
      x-examples:
        example-1:
          url: 'https://www.tropipay.com/m-login/eyJtZXJjaGFudElkIjoxLCJzaWduYXR1cmUiOiJmZmVhZTE2ZDM4MmQ1ZDFjZDlkYjU5NzdmYzcxZmUzYiIsImNvZGUiOjE2MTM3Nzk4NTYxMzgsInJlZGlyZWN0VHlwZSI6IjEiLCJleHRyYUNTUyI6Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzcyIsInJlZGlyZWN0VXJsIjoiaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbSJ9'
    EventListDescription:
      type: array
      description: ''
      minItems: 1
      uniqueItems: true
      items:
        type: object
        required:
          - name
          - description
        properties:
          name:
            type: string
            minLength: 1
          description:
            type: string
            minLength: 1
      x-examples:
        example-1:
          - name: user_signup
            description: Event launched once an user complete registration on the TropiPay platform.
          - name: payment_in_state_change
            description: The event is fired once a user changes their status payment in entry method.
          - name: payment_out_state_change
            description: The event is fired once a user changes their status payment out entry method.
    EventResponse:
      description: ''
      type: object
      properties:
        action:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        details:
          type: object
          properties: {}
          required: []
      required:
        - action
        - status
        - details
      x-examples:
        example-1:
          action: update
          status: success
          details: {}
  securitySchemes: {}
  parameters:
    User-Authorization-Token:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
      description: 'Bearer {your-token}'
