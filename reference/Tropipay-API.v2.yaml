openapi: 3.0.0
info:
  title: TPP API v2.0
  version: '2.0'
  description: Tropipay API V2.0
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /api/v2/hook:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: Here we have an example of a valid response for a merchant who subscribed to two events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                Example:
                  value:
                    - event: user_signup
                      target: email
                      value: tonykssa@gmail.com
                      createdAt: '2021-02-13T21:30:59.154Z'
                      updatedAt: '2021-02-13T21:30:59.154Z'
                    - event: user_login
                      target: web
                      value: 'http://localhost:4000/api/user/login/listen'
                      createdAt: '2021-02-13T22:43:11.243Z'
                      updatedAt: '2021-02-13T22:43:11.243Z'
        '500':
          description: |-
            In case of error in the token encoding you will receive an internal error with a structure as shown in example *'Example 1: Bad token encoding'*.
             
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown in example *'Example 2: Bad token keys'*.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'Example 1: Bad token encoding':
                  value:
                    error:
                      code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
                      message: Failed to authenticate token for Merchant!
                'Example 2: Bad token keys':
                  value:
                    error:
                      code: 'OperationError: Failed to validate merchant token!'
                      message: Failed to authenticate token for Merchant!
      operationId: get-api-v2-hook
      parameters:
        - schema:
            type: string
            example: Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
          in: header
          name: Authorization
          description: 'Bearer {YOUR_TOKEN}'
          required: true
      description: |
        Endpoint for get event list hook by merchant. 

        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer YOUR_TOKEN
        ```

        YOUR_TOKEN is formed from: 
        ```
          Bearer Base64( API_CODE : API_KEY )
        ```

        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )

        ## Event 
        Events are made up of an object with three fundamental properties *(event, target, value)*
        ```json
        {
              "event": "user_signup",
              "target": "email",
              "value": "tonykssa@gmail.com",
              "createdAt": "2021-02-13T21:30:59.154Z",
              "updatedAt": "2021-02-13T21:30:59.154Z"
        }
        ```

        * **event:** String that represents the name of the event, you must select from the list of available events, otherwise it will not produce an error but it will not be executed. For get full list of available events see endpoint **GET /api/v2/hook/events**.
        * **target:** String representing the type of event supported. It is currently available: 'web' (allows to receive information in a url), 'email' (allows to receive information in an email address). 
        * **value:** String that represents the value depending on the type of selected event determined by the 'target' property, for example if the selected 'target' is email the value would be an email address, likewise if the selected 'target' is 'web' the expected value corresponds to a url that receives information through the HTTP POST method. 
    post:
      summary: ''
      operationId: post-api-v2-hook
      responses:
        '200':
          description: OK
      description: |
        Endpoint allows a merchant to subscribe to an event, specifying the options to receive information at the time it is trigger.


        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer Base64( API_CODE : API_KEY )
        ```
        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )

        ## Event 
        Events are made up of an object with three fundamental properties *(event, target, value)*

        * **event:** String that represents the name of the event, you must select from the list of available events, otherwise it will not produce an error but it will not be executed. For get full list of available events see endpoint **GET /api/v2/hook/events**.
        * **target:** String representing the type of event supported. It is currently available: 'web' (allows to receive information in a url), 'email' (allows to receive information in an email address). 
        * **value:** String that represents the value depending on the type of selected event determined by the 'target' property, for example if the selected 'target' is email the value would be an email address, likewise if the selected 'target' is 'web' the expected value corresponds to a url that receives information through the HTTP POST method. 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: |-
          Here we have an example of a valid params request:
          ```json
          {
                "event": "user_signup",
                "target": "web",
                "value": "https://www.merchant_domain.com/api/user/signup/listen"
          }
          ```
  /api/v2/hook/events:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: |-
            Here we have an example of a valid response: 
            ```json
            [
              { 
                name: 'user_signup', 
                description: 'Event launched once an user complete registration on the TropiPay platform.' 
              },{ 
                name: 'payment_in_state_change', 
                description: 'The event is fired once a user changes their status payment in entry method.' 
              },{ 
                name: 'payment_out_state_change', 
                description: 'The event is fired once a user changes their status payment out entry method.' 
              }
            ]
            ```
      operationId: get-api-v2-hook-events
      description: |
        Endpoint for get full list of available events.


        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer Base64( API_CODE : API_KEY )
        ```
        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )

        ## Events 
        Events are made up of an object with two fundamental properties *(name, description)*
        ```json
        { 
            name: 'user_signup', 
            description: 'Event launched once an user complete registration on the TropiPay platform.' 
        }
        ```
        The **name** is a key element because it determines the correct operation when registering, if it is specified with the wrong value the merchant will never receive the notification. 
  /api/v2/access:
    post:
      summary: ''
      operationId: post-api-v2-access
      responses:
        '200':
          description: |-
            Here we have an example of a valid response:

            ```json
            {
                "url": "https://localhost:3000/m-login/eyJtZXJjaGFudElkIjoxLCJzaWduYXR1cmUiOiJmZmVhZTE2ZDM4MmQ1ZDFjZDlkYjU5NzdmYzcxZmUzYiIsImNvZGUiOjE2MTM3Nzk4NTYxMzgsInJlZGlyZWN0VHlwZSI6IjEiLCJleHRyYUNTUyI6Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzcyIsInJlZGlyZWN0VXJsIjoiaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbSJ9"
            }
            ```
        '500':
          description: |-
            In case of error in the token encoding you will receive an internal error with a structure as shown below: 
            ```json
            {
                "error": {
                    "code": "InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.",
                    "message": "Failed to authenticate token for Merchant!"
                }
            }
            ```
            In case of an error in the token keys or attempted security breach with the correct encoding, you will receive an internal error with a structure as shown below: 
            ```json
            {
                "error": {
                    "code": "OperationError: Failed to validate merchant token!",
                    "message": "Failed to authenticate token for Merchant!"
                }
            }
            ```
      description: |-
        Endopint that allows obtaining the url to obtain the login form of the TropiPay platform. Take in mind that the login url provides a form that must be rendered in a container, we recommend the use of *IFRAME*. For security reasons the login url will be valid for 30 seconds, after that term it will have to be requested again. 

        ## Authentication
        Fot the authentication you need to send the Authorization header with the value: 
        ```
          Bearer Base64( API_CODE : API_KEY )
        ```
        an example would be:
        ```
          Bearer MTplMXczeTRydzVlcjNvNGY0azRjOHI3dHY0NXY=
        ```
        Where you must calculate the token by using a Base64 of your **API_CODE + " : " + API_KEY** including the colom symbol ( : )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: |-
          -  **redirectType**: the type of request defines the mode in which the login form interacts with its container, it can take values such as: 
             * 1: Redirect the page to a specific address, this being specified in the parameters called *redirectUrl*. 
             * 2: Set communication with your container using the *window.addEventListener* and *parent.postMessage messages*.
          -  **redirectUrl**: Set url to which you want to redirect once the login process has been successfully completed, it depends on the value set in the *redirectType* property.
          -  **extraCSS"**: The login form allows to adjust its graphical interface through the injection of stylesheets, this property defines the url of the remote css that you want to insert to customize the mentioned form.

          Here we have an example of a valid request:
          ```json
          {
              "redirectType": 1,
              "extraCSS": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css",
              "redirectUrl": "https://getbootstrap.com/docs"
          }
          ```
components:
  schemas:
    User:
      title: User
      type: object
      description: User Model for Tropipay Clients
      x-examples:
        Alice Smith:
          id: 1423
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Event:
      description: ''
      type: object
      properties:
        event:
          type: string
          minLength: 1
        target:
          type: string
          minLength: 1
        value:
          type: string
          minLength: 1
        createdAt:
          type: string
          minLength: 1
        updatedAt:
          type: string
          minLength: 1
      required:
        - event
        - target
        - value
        - createdAt
        - updatedAt
      x-examples:
        example-1:
          event: user_signup
          target: email
          value: tonykssa@gmail.com
          createdAt: '2021-02-13T21:30:59.154Z'
          updatedAt: '2021-02-13T21:30:59.154Z'
    Events:
      title: Events
      type: array
      items:
        $ref: '#/components/schemas/Event'
      x-examples:
        example-1:
          - event: user_signup
            target: email
            value: tonykssa@gmail.com
            createdAt: '2021-02-13T21:30:59.154Z'
            updatedAt: '2021-02-13T21:30:59.154Z'
          - event: user_login
            target: web
            value: 'http://localhost:4000/api/user/login/listen'
            createdAt: '2021-02-13T22:43:11.243Z'
            updatedAt: '2021-02-13T22:43:11.243Z'
    ErrorResponse:
      description: ''
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              minLength: 1
            message:
              type: string
              minLength: 1
          required:
            - code
            - message
      required:
        - error
      x-examples:
        example-1:
          error:
            code: 'InvalidCharacterError: Invalid character: the string to be decoded is not correctly encoded.'
            message: Failed to authenticate token for Merchant!
